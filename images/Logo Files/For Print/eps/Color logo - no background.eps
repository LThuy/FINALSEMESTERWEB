%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 610
%%HiResBoundingBox: 0 0 2391.1199 609.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 609.12 re
W
q
[0.24 0 0 -0.24 0 609.12] cm
q
0 0 9962.5 2534.375 re
W*
q
[30.522364 0 0 30.536356 293.01471 -195.43266] cm
q
82.207001 41.768002 m
82.223 41.399002 82.235001 41.028 82.235001 40.654003 c
82.235001 27.038 71.188004 16 57.560001 16 c
47.691002 16 39.179001 21.791 35.233002 30.154999 c
33.041 28.591999 30.333002 27.665998 27.401001 27.665998 c
20.106001 27.665998 14.193001 33.382999 14.193001 40.433998 c
14.193001 41.480999 14.327001 42.496998 14.572001 43.469997 c
6.251 45.242001 0 52.768002 0 61.785999 c
0 72.120003 8.208 80 18.333 80 c
78.457001 80 l
88.144997 80 96 71.725998 96 60.905998 c
96 51.523998 90.093002 43.687 82.207001 41.768002 c
h
58.027 59.018002 m
58.027 60.699001 56.229 62.062 54.011002 62.062 c
51.793003 62.062 49.995003 60.699001 49.995003 59.018002 c
49.995003 57.337002 51.793003 55.974003 54.011002 55.974003 c
54.011002 46.989002 l
46 49.075001 l
46 62.699001 l
46 62.723 45.978001 62.738003 45.973999 62.761002 c
45.98 62.827 46 62.889 46 62.955002 c
46 64.637001 44.201 66 41.981998 66 c
39.762997 66 37.963997 64.637001 37.963997 62.955002 c
37.963997 61.273003 39.762997 59.910004 41.981998 59.910004 c
41.987999 59.910004 41.993999 59.911003 42 59.911003 c
42 46.405998 l
42 46.364998 42.034 46.339996 42.042999 46.301998 c
42.057999 46.207996 42.082001 46.130997 42.142998 46.059998 c
42.148998 46.053997 42.155998 46.050999 42.161999 46.044998 c
42.223999 45.980999 42.280998 45.908997 42.374001 45.884998 c
56.943001 42.091 l
56.943001 42.117001 l
57.466999 42.068001 57.947002 42.400002 58.032001 42.903999 c
58.055 43.042 58.027 58.881001 58.027 59.018002 c
h
W
[95.999999 0 0 64.000002 0.000000618419 16.000002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.573 mul 0.427 add
1 index 1 exp -0.168 mul 0.486 add
2 index 1 exp 0 mul 1 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[38.646099 0 0 38.663815 3685.5237 153.332855] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
5.92 40 m
3.2 40 l
3.2 11.200001 l
5.92 11.200001 l
5.92 23.560001 l
22.960001 23.560001 l
22.960001 11.200002 l
25.68 11.200002 l
25.68 40 l
22.960001 40 l
22.960001 25.880001 l
5.92 25.880001 l
5.92 40 l
h
55.360001 19.559999 m
52.560001 19.559999 l
51.440002 14.639999 48.400002 12.759999 43.480003 12.759999 c
36.520004 12.759999 33.520004 18.719999 33.520004 25.52 c
33.520004 31.960001 35.880005 38.440002 43.720005 38.440002 c
48.680004 38.440002 51.760006 35.080002 52.840004 30.520002 c
55.680004 30.520002 l
54.400005 36.080002 50.920006 40.760002 43.200005 40.760002 c
34.320004 40.760002 30.800005 33.760002 30.800005 25.600002 c
30.800005 14.600002 36.560005 10.440002 44.200005 10.440002 c
50.120003 10.440002 54.440002 13.600002 55.360004 19.560001 c
55.360001 19.559999 l
h
58.400002 13.520001 m
58.400002 11.200001 l
79.360001 11.200001 l
79.360001 13.520001 l
70.239998 13.520001 l
70.239998 40 l
67.519997 40 l
67.519997 13.520001 l
58.399998 13.520001 l
58.400002 13.520001 l
h
85.839996 40 m
83.119995 40 l
83.119995 11.200001 l
93.639999 11.200001 l
101.120003 11.200001 103.040001 14.920001 103.040001 19.240002 c
103.040001 25.680002 97.32 27.280003 92 27.280003 c
85.839996 27.280003 l
85.839996 40.000004 l
85.839996 40 l
h
85.839996 24.959999 m
92.079994 24.959999 l
97.159996 24.959999 100.319992 23.919998 100.319992 19.039999 c
100.319992 15.439999 97.999992 13.519999 92.87999 13.519999 c
85.839989 13.519999 l
85.839989 24.959999 l
85.839996 24.959999 l
h
110.080002 40 m
107.68 40 l
107.68 11.200001 l
110.080002 11.200001 l
110.080002 40 l
h
129.759995 32.360001 m
129.759995 29.120001 l
127.719994 29.960001 125.639992 30.120001 123.559998 30.280001 c
119.919998 30.560001 117.720001 31.880001 117.720001 34.68 c
117.720001 37.200001 119.919998 38.400002 122.200005 38.400002 c
126.000008 38.400002 129.76001 36.560001 129.76001 32.360001 c
129.759995 32.360001 l
h
122.400002 28.360001 m
125.720001 27.92 l
126.599998 27.84 128.080002 27.6 128.880005 27.24 c
129.680008 26.879999 129.76001 25.799999 129.76001 25.08 c
129.76001 22.639999 128.320007 20.880001 124.600006 20.880001 c
121.280006 20.880001 119.000008 21.960001 118.560005 25.560001 c
116.120003 25.560001 l
116.480003 20.68 120.120003 18.720001 124.639999 18.720001 c
128.839996 18.720001 132.160004 20.360001 132.160004 25.160002 c
132.160004 36.440002 l
132.160004 38.320004 132.639999 38.760002 134.680008 38.040001 c
134.680008 39.920002 l
134.320007 40.040001 133.480011 40.320004 132.800003 40.320004 c
132.400009 40.320004 132.080002 40.280003 131.720001 40.200005 c
130.119995 39.960003 129.839996 38.560005 129.800003 37.120003 c
127.800003 39.360004 125.080002 40.560001 122.080002 40.560001 c
118.440002 40.560001 115.160004 38.600002 115.160004 34.600002 c
115.160004 31.120003 117.560005 29.000002 122.400002 28.360003 c
122.400002 28.360001 l
h
138.279999 47.880001 m
138.279999 45.639999 l
138.919998 45.759998 139.600006 45.880001 140.279999 45.880001 c
143 45.880001 143.399994 41.959999 144.319992 40.16 c
136.279999 19.280001 l
138.959991 19.280001 l
145.599991 37.080002 l
152.23999 19.280003 l
154.839996 19.280003 l
147.119995 39.720001 l
145.159988 44.920002 143.87999 48.16 140.559998 48.16 c
139.720001 48.16 138.919998 48.040001 138.279999 47.880001 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
